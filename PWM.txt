include HT66F50.inc

ds	.section	'data'

STACK_A		DB		?
STACK_PSW	DB		?
COUNT		DB		20	DUP(?)
LCM_EN		EQU		PB1
LCM_ENC		EQU		PBC1
LCM_RW		EQU		PB2
LCM_RWC		EQU		PBC2
LCM_RS		EQU		PB3
LCM_RSC		EQU		PBC3
LCM_PORT	EQU		PC
LCM_PORTC	EQU		PCC
DEL1  		DB		?
DEL2  		DB 		?
DEL3		DB		?
LCM_TEMP	DB		?
DC_FLAG		DBIT
KEY			DB		?
KEY_PORT0	EQU		PB.4
KEY_PORT0C	EQU		PBC.4
KEY_PORT1	EQU		PA.2
KEY_PORT1C	EQU		PAC.2
KEY_PORT2	EQU		PA.3
KEY_PORT2C	EQU		PAC.3
KEY_PORT3	EQU		PA.4
KEY_PORT3C	EQU		PAC.4
KEY_PORT4	EQU		PA.5
KEY_PORT4C	EQU		PAC.5
KEY_PORT5	EQU		PA.6
KEY_PORT5C	EQU		PAC.6
KEY_PORT6	EQU		PA.7
KEY_PORT6C	EQU		PAC.7
KEY_PORT7	EQU		PB.5
KEY_PORT7C	EQU		PBC.5
KEY_PORT0PU	EQU		PBPU.4
KEY_PORT1PU	EQU		PAPU.2
KEY_PORT2PU	EQU		PAPU.3
KEY_PORT3PU	EQU		PAPU.4
KEY_PORT4PU	EQU		PAPU.5
KEY_PORT5PU	EQU		PAPU.6
KEY_PORT6PU	EQU		PAPU.7
KEY_PORT7PU	EQU		PBPU.5

cs	.section	at  000H	'code'
			ORG     00H
			JMP		MAIN
			ORG		1CH
			JMP		ISR_ADC
;===================================
MAIN:
			CALL	SETUP
			CALL	RUN
			JMP		$-1
;===================================
SETUP		PROC
			MOV		A,08H
			MOV		CP0C,A
			MOV		CP1C,A
			CALL	INIT_LCM
			CALL	INIT_PWM
			RET
SETUP		ENDP
;===================================
INIT_LCM	PROC
			CLR		ACERL
			CLR		LCM_EN
			CLR		LCM_RW
			CLR		LCM_RS
			CLR		LCM_ENC
			CLR		LCM_RWC
			CLR		LCM_RSC
			CALL	DELAY
			MOV		A,28H	;4腳位修改
			CALL   	WLCMC_4
			MOV		A,0FH
			CALL   	WLCMC_4
			MOV		A,06H
			CALL   	WLCMC_4
			MOV		A,01H
			CALL   	WLCMC_4
			RET
INIT_LCM 	ENDP
;===================================
INIT_PWM 	PROC
			MOV		A,10000000B
	   		MOV		TMPC0,A
    		MOV		A,00000010B
    		MOV		TM1C0,A
    		MOV		A,10101001B
    		MOV		TM1C1,A
    		MOV		A,10101000B
    		MOV		TM1C2,A
			MOV		A,LOW	255
			MOV		TM1AL,A
			MOV		A,HIGH	255
			MOV		TM1AH,A
			CLR		PA.1
 			CLR		PAC.1
 			CLR		PC.0
 			CLR		PCC.0
			SET		T1ON
			RET
INIT_PWM	ENDP
;===================================
RUN			PROC
			MOV		A,01H	;清空
			CALL	WLCMC_4
			MOV		A,53H	;S
			CALL	WLCMD_4
			MOV		A,65H	;e
			CALL	WLCMD_4
			MOV		A,6CH	;l
			CALL	WLCMD_4
			MOV		A,65H	;e
			CALL	WLCMD_4
			MOV		A,63H	;c
			CALL	WLCMD_4
			MOV		A,74H	;t
			CALL	WLCMD_4
			MOV		A,20H	;空格
			CALL	WLCMD_4
			MOV		A,6DH	;m
			CALL	WLCMD_4
			MOV		A,6FH	;o
			CALL	WLCMD_4
			MOV		A,64H	;d
			CALL	WLCMD_4
			MOV		A,65H	;e
			CALL	WLCMD_4
			MOV		A,20H	;空格
			CALL	WLCMD_4
			MOV		A,5EH	;^
			CALL	WLCMD_4
			MOV		A,2EH	;.
			CALL	WLCMD_4
			MOV		A,3CH	;<
			CALL	WLCMD_4
			MOV		A,0C0H	;第二行第一個位置
			CALL	WLCMC_4
			MOV		A,4DH	;M
			CALL	WLCMD_4
			MOV		A,4FH	;O
			CALL	WLCMD_4
			MOV		A,44H	;D
			CALL	WLCMD_4
			MOV		A,45H	;E
			CALL	WLCMD_4
			MOV		A,2DH	;-
			CALL	WLCMD_4
			MOV		A,41H	;A
			CALL	WLCMD_4
			MOV		A,20H	;空格
			CALL	WLCMD_4
			MOV		A,4DH	;M
			CALL	WLCMD_4
			MOV		A,4FH	;O
			CALL	WLCMD_4
			MOV		A,44H	;D
			CALL	WLCMD_4
			MOV		A,45H	;E
			CALL	WLCMD_4
			MOV		A,2DH	;-
			CALL	WLCMD_4
			MOV		A,42H	;B
			CALL	WLCMD_4
			CALL	DELAY
			CALL	READ_KEY
			MOV		A,KEY
			SUB		A,10
			SZ		Z
			JMP		AMODE
			MOV		A,KEY
			SUB		A,11
			SZ		Z
			JMP		BMODE
			JMP		RUN
			RET
RUN			ENDP
;===================================
AMODE		PROC
			MOV		A,01H	;清空
			CALL	WLCMC_4
			MOV		A,80H	;第一行第一個位置
			CALL	WLCMC_4
			MOV		A,4DH	;M
			CALL	WLCMD_4
			MOV		A,4FH	;O
			CALL	WLCMD_4
			MOV		A,44H	;D
			CALL	WLCMD_4
			MOV		A,45H	;E
			CALL	WLCMD_4
			MOV		A,2DH	;-
			CALL	WLCMD_4
			MOV		A,41H	;A
			CALL	WLCMD_4
			CALL	A_FN
			CALL	READ_KEY
			MOV		A,KEY
			SUB		A,12
			SZ		Z
			JMP		RUN
			JMP		$-5
			RET
AMODE		ENDP
;===================================
BMODE		PROC
			MOV		A,01H	;清空
			CALL	WLCMC_4
			MOV		A,80H	;第一行第一個位置
			CALL	WLCMC_4
			MOV		A,4DH	;M
			CALL	WLCMD_4
			MOV		A,4FH	;O
			CALL	WLCMD_4
			MOV		A,44H	;D
			CALL	WLCMD_4
			MOV		A,45H	;E
			CALL	WLCMD_4
			MOV		A,2DH	;-
			CALL	WLCMD_4
			MOV		A,42H	;B
			CALL	WLCMD_4
			CALL	B_FN
			CALL	READ_KEY
			MOV		A,KEY
			SUB		A,12
			SZ		Z
			JMP		RUN
			JMP		$-5
			RET
BMODE		ENDP
;===================================
A_FN		PROC
			CLR		ACERL
			MOV		A,0C0H	;第二行第一個位置
			CALL	WLCMC_4
			CALL	READ_KEY	;第一個數字
			MOV		A,9
			SUB		A,KEY
			SNZ		C
			JMP		$-4
			MOV		A,KEY
			MOV		COUNT[0],A
			MOV		COUNT[4],A
			MOV		A,30H
			ADD		A,KEY
			CALL	WLCMD_4
			CALL	DELAY
			CALL	READ_KEY	;第二個數字
			MOV		A,9
			SUB		A,KEY
			SNZ		C
			JMP		$-4
			MOV		A,KEY
			MOV		COUNT[1],A
			MOV		COUNT[5],A
			MOV		A,30H
			ADD		A,KEY
			CALL	WLCMD_4
			CALL	DELAY
			CALL	READ_KEY	;第三個數字
			MOV		A,9
			SUB		A,KEY
			SNZ		C
			JMP		$-4
			MOV		A,KEY
			MOV		COUNT[2],A
			MOV		COUNT[6],A
			MOV		A,30H
			ADD		A,KEY
			CALL	WLCMD_4
			CALL	DELAY
			CALL	READ_KEY	;按下E執行
			MOV		A,14
			XOR		A,KEY
			SNZ		Z
			JMP		$-4
			MOV		A,2	;超過250顯示Error!!!!
			SUB		A,COUNT[4]
			SNZ		C
			JMP		$+16	;比他大，跳下去顯示錯誤
			SNZ		Z
			JMP		$+36	;比他小，跳下去執行
			MOV		A,5
			SUB		A,COUNT[1]
			SNZ		C
			JMP		$+10	;比他大，跳下去顯示錯誤
			SNZ		Z
			JMP		$+30	;比他小，跳下去執行
			MOV		A,0
			SUB		A,COUNT[2]
			SNZ		C
			JMP		$+4		;比他大，跳下去顯示錯誤
			SNZ		Z
			JMP		$+24	;比他小，跳下去執行
			JMP		$+23
			MOV		A,20H	;空格
			CALL	WLCMD_4
			MOV		A,45H	;E
			CALL	WLCMD_4
			MOV		A,72H	;r
			CALL	WLCMD_4
			MOV		A,72H	;r
			CALL	WLCMD_4
			MOV		A,6FH	;o
			CALL	WLCMD_4
			MOV		A,72H	;r
			CALL	WLCMD_4
			MOV		A,21H	;!
			CALL	WLCMD_4
			MOV		A,21H	;!
			CALL	WLCMD_4
			MOV		A,21H	;!
			CALL	WLCMD_4
			MOV		A,21H	;!
			CALL	WLCMD_4
			CALL	DELAY
			JMP		END_A_FN
			MOV		A,100	;乘100倍
			MOV		COUNT[3],A
			CLR		ACC
			ADD		A,COUNT[0]
			SDZ		COUNT[3]
			JMP		$-2
			MOV		COUNT[0],A
			MOV		A,10	;乘10倍
			MOV		COUNT[3],A
			CLR		ACC
			ADD		A,COUNT[1]
			SDZ		COUNT[3]
			JMP		$-2
			ADDM	A,COUNT[0]
			MOV		A,COUNT[2]
			ADD		A,COUNT[0]
			MOV		TM1BL,A
			MOV		A,20H	;空格
			CALL	WLCMD_4
			MOV		A,4	;乘4倍
			MOV		COUNT[7],A
			CLR		ACC
			ADD		A,COUNT[4]
			SDZ		COUNT[7]
			JMP		$-2
			MOV		COUNT[4],A
			MOV		A,4	;乘4倍
			MOV		COUNT[7],A
			CLR		ACC
			ADD		A,COUNT[5]
			SDZ		COUNT[7]
			JMP		$-2
			MOV		COUNT[5],A
			MOV		A,4	;乘4倍
			MOV		COUNT[7],A
			CLR		ACC
			ADD		A,COUNT[6]
			SDZ		COUNT[7]
			JMP		$-2
			MOV		COUNT[6],A
			CLR		COUNT[8]
			MOV		A,COUNT[6]
			SUB		A,10
			SNZ		C
			JMP		$+3
			INC		COUNT[8]
			JMP		$-4
			ADD		A,10
			MOV		COUNT[6],A
			MOV		A,COUNT[8]
			ADDM	A,COUNT[5]
			CLR		COUNT[8]
			MOV		A,COUNT[5]
			SUB		A,10
			SNZ		C
			JMP		$+3
			INC		COUNT[8]
			JMP		$-4
			ADD		A,10
			MOV		COUNT[5],A
			MOV		A,COUNT[8]
			ADDM	A,COUNT[4]
			MOV		A,10	;若COUNT[4]=10要修正
			XOR		A,COUNT[4]
			SNZ		Z
			JMP		$+6
			MOV		A,31H	;1
			CALL	WLCMD_4
			MOV		A,30H	;0
			CALL	WLCMD_4
			JMP		$+4
			MOV		A,30H
			ADD		A,COUNT[4]
			CALL	WLCMD_4
			MOV		A,30H
			ADD		A,COUNT[5]
			CALL	WLCMD_4
			MOV		A,2EH	;.
			CALL	WLCMD_4
			MOV		A,30H
			ADD		A,COUNT[6]
			CALL	WLCMD_4
			MOV		A,25H	;%
			CALL	WLCMD_4
			CALL	DELAY
END_A_FN:	RET
A_FN		ENDP
;===================================
B_FN		PROC
			MOV		A,00000000B
			MOV		ADCR0,A 
			MOV		A,00000010B
			MOV		ADCR1,A
 			MOV		A,00000001B
 			MOV		ACERL,A
 			SET		ADE
			SET		EMI
			SET		START
			CLR		START
			CALL	DELAY
			RET
B_FN		ENDP
;===================================
ISR_ADC		PROC
			MOV		STACK_A,A
			MOV		A,STATUS
			MOV		STACK_PSW,A
			MOV		A,ADRH
			MOV		TM1BL,A
			MOV		COUNT[9],A
			MOV		COUNT[15],A
			CALL	DUTY
			MOV		A,STACK_PSW
			MOV		STATUS,A
			MOV		A,STACK_A
			RETI
ISR_ADC		ENDP
;===================================
DUTY		PROC
			MOV		A,0C0H	;第二行第一個位置
			CALL	WLCMC_4
			CLR		COUNT[10]
			CLR		COUNT[11]
			CLR		COUNT[12]
			MOV		A,COUNT[9]
			SUB		A,51
			SNZ		C
			JMP		$+3
			INC		COUNT[10]	;個位數
			JMP		$-4
			ADD		A,51
			SUB		A,5
			SNZ		C
			JMP		$+3
			INC		COUNT[11]	;小數第1位
			JMP		$-4
			ADD		A,51
			MOV		COUNT[13],A
			MOV		A,10
			MOV		COUNT[14],A	;加10遍
			CLR		ACC
			ADD		A,COUNT[13]
			SDZ		COUNT[14]
			JMP		$-2
			SUB		A,51
			SNZ		C
			JMP		$+3
			INC		COUNT[12]	;小數第2位
			JMP		$-4
			MOV		A,30H
			ADD		A,COUNT[10]
			CALL	WLCMD_4
			MOV		A,2EH	;.
			CALL	WLCMD_4
			MOV		A,30H
			ADD		A,COUNT[11]
			CALL	WLCMD_4
			MOV		A,30H
			ADD		A,COUNT[12]
			CALL	WLCMD_4
			MOV		A,56H	;V
			CALL	WLCMD_4
			MOV		A,20H	;空格
			CALL	WLCMD_4

			CLR		COUNT[16]
			CLR		COUNT[17]
			CLR		COUNT[18]
			MOV		A,COUNT[15]
			SUB		A,100
			SNZ		C
			JMP		$+3
			INC		COUNT[16]	;百位數
			JMP		$-4
			ADD		A,100
			SUB		A,10
			SNZ		C
			JMP		$+3
			INC		COUNT[17]	;十位數
			JMP		$-4
			ADD		A,10
			MOV		COUNT[18],A	;個位數

			MOV		A,4	;乘4倍
			MOV		COUNT[14],A
			CLR		ACC
			ADD		A,COUNT[16]
			SDZ		COUNT[14]
			JMP		$-2
			MOV		COUNT[16],A
			MOV		A,4	;乘4倍
			MOV		COUNT[14],A
			CLR		ACC
			ADD		A,COUNT[17]
			SDZ		COUNT[14]
			JMP		$-2
			MOV		COUNT[17],A
			MOV		A,4	;乘4倍
			MOV		COUNT[14],A
			CLR		ACC
			ADD		A,COUNT[18]
			SDZ		COUNT[14]
			JMP		$-2
			MOV		COUNT[18],A

			CLR		COUNT[19]
			MOV		A,COUNT[18]
			SUB		A,10
			SNZ		C
			JMP		$+3
			INC		COUNT[19]
			JMP		$-4
			ADD		A,10
			MOV		COUNT[18],A
			MOV		A,COUNT[19]
			ADDM	A,COUNT[17]
			CLR		COUNT[19]
			MOV		A,COUNT[17]
			SUB		A,10
			SNZ		C
			JMP		$+3
			INC		COUNT[19]
			JMP		$-4
			ADD		A,10
			MOV		COUNT[17],A
			MOV		A,COUNT[19]
			ADDM	A,COUNT[16]
			MOV		A,10	;若COUNT[4]=10要修正
			XOR		A,COUNT[16]
			SNZ		Z
			JMP		$+7
			MOV		A,31H	;1
			CALL	WLCMD_4
			MOV		A,30H	;0
			CALL	WLCMD_4
			CLR		COUNT[17]
			JMP		$+4
			MOV		A,30H
			ADD		A,COUNT[16]
			CALL	WLCMD_4
			MOV		A,30H
			ADD		A,COUNT[17]
			CALL	WLCMD_4
			MOV		A,2EH	;.
			CALL	WLCMD_4
			MOV		A,30H
			ADD		A,COUNT[18]
			CALL	WLCMD_4
			MOV		A,25H	;%
			CALL	WLCMD_4
			CALL	DELAY
			RET
DUTY		ENDP
;===================================
WLCMD_4		PROC
			SET		DC_FLAG
			JMP   	WLCM_4
WLCMC_4:	CLR		DC_FLAG
WLCM_4:		MOV		LCM_TEMP,A
			MOV		A,11110000B
			ORM		A,LCM_PORTC
			SET	 	LCM_RW
			CLR		LCM_RS
			NOP
			SET	 	LCM_EN
			NOP
WF_4:		SZ		LCM_PORT.7
			JMP		WF_4
			CLR	 	LCM_EN
			MOV		A,00001111B
			ANDM	A,LCM_PORTC
			ANDM	A,LCM_PORT
			MOV		A,LCM_TEMP
			AND		A,11110000B
			ORM		A,LCM_PORT
			CLR		LCM_RW
			CLR		LCM_RS
			SZ		DC_FLAG
			SET	 	LCM_RS
			NOP
			SET		LCM_EN
			NOP
			CLR	 	LCM_EN
			MOV		A,00001111B
			ANDM	A,LCM_PORT
			SWAPA	LCM_TEMP
			AND		A,11110000B
			ORM		A,LCM_PORT
			SET		LCM_EN
			NOP
			CLR	 	LCM_EN
			RET
WLCMD_4		ENDP
;===================================
READ_KEY	PROC
			CLR		KEY_PORT0C
			CLR		KEY_PORT1C
			CLR		KEY_PORT2C
			CLR		KEY_PORT3C
			SET		KEY_PORT4C
			SET		KEY_PORT5C
			SET		KEY_PORT6C
			SET		KEY_PORT7C
			CLR		KEY_PORT0PU
			CLR		KEY_PORT1PU
			CLR		KEY_PORT2PU
			CLR		KEY_PORT3PU
			SET		KEY_PORT4PU
			SET		KEY_PORT5PU
			SET		KEY_PORT6PU
			SET		KEY_PORT7PU
			CLR		KEY
			MOV		A,04
			MOV		COUNT,A	
SCAN_KEY:	SET		KEY_PORT0
			SET		KEY_PORT1
			SET		KEY_PORT2
			SET		KEY_PORT3
			SET		KEY_PORT4
			SET		KEY_PORT5
			SET		KEY_PORT6
			SET		KEY_PORT7
			MOV		A,4
			SUB		A,COUNT
			SZ		Z
			CLR		KEY_PORT0
			MOV		A,3
			SUB		A,COUNT
			SZ		Z
			CLR		KEY_PORT1
			MOV		A,2
			SUB		A,COUNT
			SZ		Z
			CLR		KEY_PORT2
			MOV		A,1
			SUB		A,COUNT
			SZ		Z
			CLR		KEY_PORT3
			SNZ		KEY_PORT4
			JMP		END_KEY
			INC		KEY
			SNZ		KEY_PORT5
			JMP		END_KEY
			INC		KEY
			SNZ		KEY_PORT6
			JMP		END_KEY
			INC		KEY
			SNZ		KEY_PORT7
			JMP		END_KEY
			INC		KEY
			SDZ		COUNT
			JMP		SCAN_KEY
END_KEY:	RETI
READ_KEY	ENDP
;===================================
DELAY		PROC
			MOV		A,20
			MOV		DEL1,A
DEL_1:  	MOV		A,30
			MOV		DEL2,A
DEL_2:		MOV		A,140
			MOV		DEL3,A
DEL_3:		SDZ		DEL3
			JMP		DEL_3
			SDZ		DEL2
			JMP		DEL_2
			SDZ		DEL1
			JMP		DEL_1
			RET
DELAY		ENDP
			END